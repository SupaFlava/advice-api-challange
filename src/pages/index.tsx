"use client";
import axios from "axios";

import Head from "next/head";
import { Inter } from "next/font/google";
import StyledButton from "@/compoenents/StyledButton";
import { StyledBtnContainer } from "@/compoenents/StyledButtonContainer";
import styled, { ThemeProvider } from "styled-components";
import { useEffect, useState } from "react";
import { GlobalStyles } from "@/styles/global";
import { theme } from "@/styles/theme";
import { getAdvice } from "./api/hello";
const inter = Inter({ subsets: ["latin"] });

const localData = [
  "Cheese",
  "love",
  "friends",
  "sleep",
  "food",
  "spiders",
  "work",
  "regret",
];
const SearchBox = styled.input`
  width: 180px;
  height: 40px;
  color: blue;
  background-color: white;
  font-size: 22px;
  border-radius: 5px;
  border: none;
`;

export default function Home() {
  const [advice, setAdvice] = useState<[]>([]);
  const [searchedAdvice, setSearchedAdvice] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState<string>("");

  useEffect(() => {
    async function fetchData() {
      const response = await axios.get("https://api.adviceslip.com/advice");
      setAdvice(response.data.slip.advice);
    }
    fetchData();
  }, [advice]);

  useEffect(() => {
    const controller = new AbortController();

    async function getSearched() {
      try {
        const response = await axios.get(
          `https://api.adviceslip.com/advice/search/${searchTerm}`,
          {
            signal: controller.signal,
          }
        );
        console.log(response);
        if ("message" in response.data) {
          setSearchedAdvice(response.data.message.text);
        } else {
          console.log(response);
          setSearchedAdvice(response.data.slips[0].advice);
          console.log("in else sucess", searchedAdvice);
        }
      } catch (error) {
        console.log(error);
      }
    }
    getSearched();
    return () => {
      controller.abort();
    };
  }, [searchedAdvice, searchTerm]);

  const handleSearch = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSearchTerm(e.currentTarget.search.value);
  };
  async function getLocalData(data: string) {
    console.log("click");
    setSearchTerm(data);
  }

  return (
    <ThemeProvider theme={theme}>
      <GlobalStyles />
      {true}

      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h1>Solid advice</h1>
        <StyledBtnContainer>
          {localData.map((localD) => {
            return (
              <StyledButton onClick={() => getLocalData(localD)} key={localD}>
                {localD}
              </StyledButton>
            );
          })}
        </StyledBtnContainer>
        <div>
          <form onSubmit={handleSearch}>
            <label htmlFor="search">Search for Advice:</label>
            <input type="text" name="search" id="search" />
            <button type="submit">search</button>
          </form>
        </div>
        {!searchedAdvice ? <h1>{advice}</h1> : <h1>{searchedAdvice}</h1>}
      </div>
    </ThemeProvider>
  );
}
